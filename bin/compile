#!/usr/bin/env bash

# Usage:
#
#     $ bin/compile <build-dir>

# Fail fast and fail hard.
set -eo pipefail

# Prepend proper path for virtualenv hackery. This will be deprecated soon.
export PATH=:/usr/local/bin:$PATH

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1

CACHED_DIRS=".heroku"

# Static configurations for virtualenv caches.
PROFILE_PATH="$BUILD_DIR/.profile.d/python.sh"

# Python version. This will be used in the future to specify custom Pythons.
DEFAULT_PYTHON_VERSION="python-2.7.3"
PYTHON_EXE="/app/.heroku/python/bin/python"

# Sanitizing environment variables.
unset GIT_DIR PYTHONHOME PYTHONPATH LD_LIBRARY_PATH LIBRARY_PATH

# We'll need to send these statics to other scripts we `source`.
export BUILD_DIR CACHE_DIR BIN_DIR PROFILE_PATH

# Syntax sugar.
source $BIN_DIR/utils

# Prepend proper path buildpack use.
export PATH=$BUILD_DIR/.heroku/python/bin:$PATH
export PYTHONUNBUFFERED=1
export LANG=en_US.UTF-8
export LIBRARY_PATH=$BUILD_DIR/.heroku/vendor/lib
export LD_LIBRARY_PATH=$BUILD_DIR/.heroku/vendor/lib

# Switch to the repo's context.
cd $BUILD_DIR

# Experimental pre_compile hook.
source $BIN_DIR/steps/hooks/pre_compile

# If no requirements given, assume `setup.py develop`.
if [ ! -f requirements.txt ]; then
  puts-step "No requirements.txt provided; assuming dist package."
  echo "-e ." > requirements.txt
fi

# If no runtime given, assume default version.
if [ ! -f runtime.txt ]; then
  puts-step "No runtime.txt provided; assuming $DEFAULT_PYTHON_VERSION."
  echo $DEFAULT_PYTHON_VERSION > runtime.txt
fi

set +e
# Create set-aside `.heroku` folder.
mkdir .heroku &> /dev/null
set -e

mkdir -p $(dirname $PROFILE_PATH)

set +e
PYTHON_VERSION=$(cat runtime.txt)

# Install Python.
puts-step "Preparing Python runtime ($PYTHON_VERSION)"
curl http://envy-versions.s3.amazonaws.com/$PYTHON_VERSION.tar.bz2 -s | tar jx &> /dev/null
if [[ $? != 0 ]] ; then
  puts-warn "Requested runtime ($PYTHON_VERSION) was not found."
  puts-warn "Aborting.  More info: https://devcenter.heroku.com/articles/python-support"
  exit 1
fi
mv python .heroku/python

# Record for future reference.
WORKING_DIR=$(pwd)

# Prepare it for the real world
puts-step "Installing Distribute (0.6.34)"
cd $ROOT_DIR/vendor/distribute-0.6.34/
python setup.py install  &> /dev/null
cd $WORKING_DIR

puts-step "Installing Pip (1.2.1)"
cd $ROOT_DIR/vendor/pip-1.2.1/
python setup.py install  &> /dev/null
cd $WORKING_DIR

hash -r

set -e

# Install Mercurial if it appears to be required.
if (grep -Fiq "hg+" requirements.txt) then
  pip install --use-mirrors mercurial | cleanup | indent
fi

# Install dependencies with Pip.
puts-step "Installing dependencies using Pip (1.2.1)"
pip install --use-mirrors -r requirements.txt --exists-action=w --src=./.heroku/src | cleanup | indent

# ### Finalize
#

# Set context environment variables.
set-env PATH '$HOME/.heroku/python/bin:$PATH'
set-env PYTHONUNBUFFERED true
set-env PYTHONHOME /app/.heroku/python
set-default-env LIBRARY_PATH /app/.heroku/vendor/lib
set-default-env LD_LIBRARY_PATH /app/.heroku/vendor/lib
set-default-env LANG en_US.UTF-8
set-default-env PYTHONHASHSEED random
set-default-env PYTHONPATH /app/

# Experimental post_compile hook.
source $BIN_DIR/steps/hooks/post_compile
